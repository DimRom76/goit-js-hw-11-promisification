{"version":3,"sources":["webpack:///./js/first.js","webpack:///./js/second.js","webpack:///./js/third.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","arrayPromise","then","all","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"yLAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEjBG,EAAe,CACnBT,EAAM,KAAMU,KAAKL,GACjBL,EAAM,KAAMU,KAAKL,GACjBL,EAAM,MAAMU,KAAKL,IAGnBH,QAAQS,IAAIF,GAAcC,MAAK,kBAAMH,QAAQC,IAAI,0B,kCChB3CI,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIf,SAAQ,SAAAC,GAIjBA,EAHqBa,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7Dd,EAAS,SAAAe,GAAY,OAAIb,QAAQc,MAAMD,IAEvCX,EAAe,CACnBM,EAAgBH,EAAO,SAASF,KAAKL,GACrCU,EAAgBH,EAAO,OAAOF,KAAKL,IAGrCH,QAAQS,IAAIF,GAAcC,MAAK,kBAAMH,QAAQC,IAAI,0BCvBjD,IAIMc,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCzB,GAL2BwB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAItB,SAAQ,SAACC,EAAS0B,GAC3BzB,YAAW,WACUsB,KAAKE,SAAW,GAGjCzB,EAAQ,CAACoB,EAAYO,GAAI9B,IAEzB6B,EAAON,EAAYO,MAEpB9B,OAID+B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVxB,EAAU,KACjCC,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CxB,EAA9C,OAGI0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAR,gCAA6CH,EAA7C,8BAGIrB,EAAe,CACnBa,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAC/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,IAGlE9B,QAAQS,IAAIF,GAAcC,MAAK,kBAAMH,QAAQC,IAAI,4B","file":"main.8d2acdb76bcb745f52cb.js","sourcesContent":["const delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\nconst arrayPromise = [\r\n  delay(2000).then(logger),\r\n  delay(1000).then(logger),\r\n  delay(1500).then(logger),\r\n];\r\n\r\nPromise.all(arrayPromise).then(() => console.log('-------------------'));\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\nconst arrayPromise = [\r\n  toggleUserState(users, 'Mango').then(logger),\r\n  toggleUserState(users, 'Lux').then(logger),\r\n];\r\n\r\nPromise.all(arrayPromise).then(() => console.log('-------------------'));\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve([transaction.id, delay]);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nconst arrayPromise = [\r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError),\r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError),\r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError),\r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError),\r\n];\r\n\r\nPromise.all(arrayPromise).then(() => console.log('-------------------'));\r\n"],"sourceRoot":""}